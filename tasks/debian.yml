---

- name: Install pgdg package signing key (Debian/pgdg)
  apt_key:
    url: https://www.postgresql.org/media/keys/ACCC4CF8.asc
    id: ACCC4CF8
  register: __postgresql_apt_key_result
  until: __postgresql_apt_key_result is succeeded
  retries: 5
  delay: 5
  when: postgresql_flavor is defined and postgresql_flavor == "pgdg"

- name: Install pgdg repository (Debian/pgdg)
  apt_repository:
    repo: "deb http://apt.postgresql.org/pub/repos/apt/ {{ ansible_distribution_release }}-pgdg main"
    update_cache: true
  when: postgresql_flavor is defined and postgresql_flavor == "pgdg"

- name: Install PostgreSQL (Debian)
  apt:
    name: postgresql{{ '-' ~ postgresql_version if postgresql_version is defined else '' }}
  register: __postgresql_apt_result
  until: __postgresql_apt_result is succeeded
  retries: 5
  delay: 5

- name: Temp file for check mode
  set_fact:
    __temp_file_for_check_mode: "/tmp/galaxyproject_postgresql_get_installed_version_trick"

- name: Create temp file for check_mode
  ansible.builtin.copy:
    content: ""
    dest: "{{ __temp_file_for_check_mode }}"
    force: yes
    mode: '0777'
  check_mode: no

- name: Get installed version
  shell: "dpkg-query -f '${Version;3}' --show postgresql"
  when: postgresql_version is not defined
  register: __postgresql_version_query_result
  changed_when: false
  check_mode: no
  args:
    # Using this in order to enforce the task to be executed in check mode
    removes: "{{ __temp_file_for_check_mode }}"

- name: Set version fact
  set_fact:
    postgresql_version: "{{ __postgresql_version_query_result.stdout.split('+') | first | string }}"
  when: postgresql_version is not defined
